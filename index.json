[{"content":"Math \u0026amp; Logic Puzzles  The Heavy Pill basket Ball Dominos Ants on triangle Jugs of water   ","permalink":"https://pushpendrahpx.github.io/posts/math-logic-puzzles-317b9469dae04e1c889ef7ea127edf86/","summary":"Math \u0026amp; Logic Puzzles  The Heavy Pill basket Ball Dominos Ants on triangle Jugs of water   ","title":"Coding Preps - Maths \u0026 Logic Puzzles"},{"content":"Bit Manipulation   Insertion Binary to String Flip bit to Wim Next Number Debugger Conversion Pairwise Swap Draw Line  ","permalink":"https://pushpendrahpx.github.io/posts/bit-manipulation-09b8c437a2fa4c05910d45853b1f2b3c/","summary":"Bit Manipulation   Insertion Binary to String Flip bit to Wim Next Number Debugger Conversion Pairwise Swap Draw Line  ","title":"Coding Preps - Bit Manipulation"},{"content":"Trees \u0026amp; Graphs   Route between Nodes Minimal Tree List of Depth Check balanced validate BST Successor Build Order First Common Ancestor BST Sequence Check Subtree Random Node Paths with Sum  ","permalink":"https://pushpendrahpx.github.io/posts/trees-graphs-4e09b2f2d81e4cb2b3e2196de3c8859c/","summary":"Trees \u0026amp; Graphs   Route between Nodes Minimal Tree List of Depth Check balanced validate BST Successor Build Order First Common Ancestor BST Sequence Check Subtree Random Node Paths with Sum  ","title":"Coding Preps - Trees \u0026 Graphs"},{"content":"Stacks \u0026amp; Queues  Three in One Stack min Stack of plates Tower of Hanoi Queue via stacks Sort Stack Animal Shelter  ","permalink":"https://pushpendrahpx.github.io/posts/stacks-queues-5e1cd9cfec3a45ca957129728ca4d7ef/","summary":"Stacks \u0026amp; Queues  Three in One Stack min Stack of plates Tower of Hanoi Queue via stacks Sort Stack Animal Shelter  ","title":"Coding Preps - Stack \u0026 Queues"},{"content":"Linked Lists   Remove Dups Return kth node from last Delete middle node Partition Sum Lists Palindrome Intersection Loop Detection  ","permalink":"https://pushpendrahpx.github.io/posts/linked-lists-e58904c532d04911b0326729ba26617b/","summary":"Linked Lists   Remove Dups Return kth node from last Delete middle node Partition Sum Lists Palindrome Intersection Loop Detection  ","title":"Coding Preps - Linked Lists"},{"content":"Arrays \u0026amp; Strings    Is Unique\n Implement an algo. to determine if a string has all unique characters. What if you cannot use additional data structures ?  Is given string ASCII or UNICODE, because if UNICODE will be there then we need to increase the array size. Sorting \u0026amp; then find continous elements  Time Complexity - O(NlogN) Space Complexity - O(N)   Comparing each char. with others,  using 2 nested loops time complexity - O(N^2) space complexity - O(1)   Optimal Solution - we can create a boolean array of total space of characters \u0026amp; iterate over string once.  Time Complexity - O(n) Space Complexity - O(1)        Check Permutation\n https://leetcode.com/problems/permutation-in-string/     URLify\n  Palindromic Permutation\n  One Away\n  String Compression\n  Rotate Matrix\n  Zero Matrix\n  String Rotation\n  ","permalink":"https://pushpendrahpx.github.io/posts/coding-prep-arrays-string/","summary":"Arrays \u0026amp; Strings    Is Unique\n Implement an algo. to determine if a string has all unique characters. What if you cannot use additional data structures ?  Is given string ASCII or UNICODE, because if UNICODE will be there then we need to increase the array size. Sorting \u0026amp; then find continous elements  Time Complexity - O(NlogN) Space Complexity - O(N)   Comparing each char.","title":"Coding Preps - Arrays \u0026 Strings"},{"content":"In old days we see that websites were not that much evolved. I would say Web Applications are just an evolved website, which uses somewhat more JS for making Websites more \u0026amp; more Interactive.\nAnd as providing users a better User Experience, there is need of managing data at clients browser. I would like to take example of React, but somewhat same thing applies to other Front-end frameworks, like Angular or Vue.\nWhen I started using React, things started making a little bit more sense, and I realized some rules there like,\n React Applications uses components to make application more Reusable We can pass data from one component to another component using props  But still some leaf components, we cant pass data to main root component directly.\nThis was somewhat confusing to me so, where should I hold my data in application, should it be distributed or central ?\nI just want to explain this stuff from my beginner experience, on building some logical decisions on where should we store it.\nThe Prop Drilling Approach In this we just pass data from parent component to child component, like if there is a component A , it can pass its state to its child components. So, if there are multiple components which are depending on single parent component and there should 1 level of hierarchy.\nBut as number of levels increases and there are multiple components dependent on multiple components for data. This Prop drilling approach will might be a disaster.\nPros  When working with small applications, it will be a simple \u0026amp; will serve purpose in easy way Data passed as props can be easily changed if needed  Cons  As Codebase increases, prop drilling will make over complicate things Props passing to end component, will increase unnecessary increase in codebase if level of hierarchy is large  To Solve this issue, we can make a central store which can pass data directly to those components only, which require them, this will reduce the extra code, and make easy for components to share data with Central store.\nThere are multiple solutions which uses central store, like Redux or Context APIs or etc. But I’ll be going through with above 2 only, as I have used above 2 only.\nRedux Redux provides a state container for Web Apps, specifically JS Apps. It provides a centralized state solution, which enables component to exchange data with other components at any level of hierarchy.\nRedux uses the concept of Reducers, Actions \u0026amp; dispatch events which follows a set of rules to make changes to central store.\nMy main aim is to tell you about the approaches, so I’ll not be writing here about Redux Working, things are well documented in documentation \u0026amp; that are super easy and beginner friendly.\nPros  Central Store, any component can access any state from store. No need to pass data through props, so no prop drilling Reduces number of rerenders, which reduces shallow copying Testing is easier as, Data \u0026amp; UI States are separated  Cons  For simpler applications, the boiler plate code is too much to handle No state safety, any state can read data from any state, so it makes state somewhat vulnerable Redux state is Immutable, so whenever state gets updated, this uses more \u0026amp; more memory  Context APIs Context APIs are the feature of React Hooks, so it’s the feature of React itself, so no need to install any 3rd party library. Using Context APIs, we can create different number of context APIs, like so maintaining UI State, User State, Browser state, Auth state etc. which enables Encapsulation, which ensures safety.\nIt makes codebase much more cleaner in comparison to Redux.\nPros  Easy to understand \u0026amp; It is part of React Hooks Can create multiple contexts for maintaining different types of states  Cons  Context APIs are not designed for multiple Refresh Decreases maintainability, even if we have made custom helpers Reusing Components, becomes somewhat difficult, because data not always comes from Contexts and Props.  Summary There are multiple approaches for state management, it just depends on the use case in which we are building our application. Is it small scale or big scale or Some toy Application? But when going with some big scale projects, we should opt for Redux, as it is widely used, and can handle high frequency updates, while Context APIs can’t handle high frequency updates.\nIn the end, “which one is better”, should be interpreted as “what is better for our product \u0026amp; team”. It depends on both Developers experience \u0026amp; the use case in project.\n Extra Material Check out - Redux \u0026amp; Flux Architecture\n","permalink":"https://pushpendrahpx.github.io/posts/post1/","summary":"In old days we see that websites were not that much evolved. I would say Web Applications are just an evolved website, which uses somewhat more JS for making Websites more \u0026amp; more Interactive.\nAnd as providing users a better User Experience, there is need of managing data at clients browser. I would like to take example of React, but somewhat same thing applies to other Front-end frameworks, like Angular or Vue.","title":"Why State management solutions for Web Apps ?"},{"content":"About Me Hi, I\u0026rsquo;m Pushpendra Vishwakarma, a prefinal year engineering student pursuing my bachelor\u0026rsquo;s degree from NIT Surat, India. I love building products \u0026amp; making it accessible for everyone.\nWork Experience React Developer Intern, Sagecodes [ May 2021 - July 2021 ]  Worked on 2 Major Projects ( Northladder [https://northladder.com/]\u0026amp; Finportal ), which were able to serve, services to number of customers. Worked with 4-5 person team, and faced various Technical issues. Managed to collaborate with backend team, and to build a secure new version of application.  Software Engineer Intern, Mailmodo [ May 2020 - Jun 2020 ]  Worked with Cloud Functions, Backend APIs Development, and Amazon SNS for Monitoring Clients Email status. Wrote Python Scripts for automating the testing process AMP Interactive Emails Template Development, worked with CSS Design Restriction  Technical Skills  Languages - C++, Javascript, Shell Scripting CS Fundamentals - Data Structures \u0026amp; Algorithms, Time Complexity Analysis, Database Management System( DBMS ), Object Oriented Programming Concepts ( OOPs ) Technologies - node.js, react.js, NextJS, MySQL, Dockers Others - Linux, Git \u0026amp; Github, RDMS  Projects Onec | Blockchain Based Platform for Artists ( NextJS, GCloud, Typescript, Redis )  Used Docker for containerising the application \u0026amp; setup NGINX Server for reverse proxy My major parts were to build a server \u0026amp; APIs for implementing features, Caching Images \u0026amp; Resizing for reducing the cost \u0026amp; Bandwidth.  Ionic Instagram | Cross Platform Application ( Web \u0026amp; Mobile, Ionic Framework, Firebase, React )  Made a cross-platform Application which implements features of instagram, and gives users ability to posts there images \u0026amp; react to other images on platform  Proctor | Web App ( React, node.js, Material UI, tensorflow.js )  Build a web app, that helps teachers for auto proctoring students while giving exams, used tensorflow.js for detecting body parts.  JioSaavn-Downloader | Chrome Extension ( Chrome APIs, Javascript )  Build a Chrome Extension for downloading MP3 Songs from website  ","permalink":"https://pushpendrahpx.github.io/about/","summary":"About Me Hi, I\u0026rsquo;m Pushpendra Vishwakarma, a prefinal year engineering student pursuing my bachelor\u0026rsquo;s degree from NIT Surat, India. I love building products \u0026amp; making it accessible for everyone.\nWork Experience React Developer Intern, Sagecodes [ May 2021 - July 2021 ]  Worked on 2 Major Projects ( Northladder [https://northladder.com/]\u0026amp; Finportal ), which were able to serve, services to number of customers. Worked with 4-5 person team, and faced various Technical issues.","title":""}]