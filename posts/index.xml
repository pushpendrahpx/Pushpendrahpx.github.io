<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Pushpendra Vishwakarma</title>
    <link>https://pushpendrahpx.github.io/posts/</link>
    <description>Recent content in Posts on Pushpendra Vishwakarma</description>
    <image>
      <url>https://pushpendrahpx.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://pushpendrahpx.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 Oct 2021 00:48:38 +0530</lastBuildDate><atom:link href="https://pushpendrahpx.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coding Preps - Maths &amp; Logic Puzzles</title>
      <link>https://pushpendrahpx.github.io/posts/math-logic-puzzles-317b9469dae04e1c889ef7ea127edf86/</link>
      <pubDate>Thu, 14 Oct 2021 00:48:38 +0530</pubDate>
      
      <guid>https://pushpendrahpx.github.io/posts/math-logic-puzzles-317b9469dae04e1c889ef7ea127edf86/</guid>
      <description>Math &amp;amp; Logic Puzzles  The Heavy Pill basket Ball Dominos Ants on triangle Jugs of water   </description>
    </item>
    
    <item>
      <title>Coding Preps - Bit Manipulation</title>
      <link>https://pushpendrahpx.github.io/posts/bit-manipulation-09b8c437a2fa4c05910d45853b1f2b3c/</link>
      <pubDate>Thu, 14 Oct 2021 00:47:38 +0530</pubDate>
      
      <guid>https://pushpendrahpx.github.io/posts/bit-manipulation-09b8c437a2fa4c05910d45853b1f2b3c/</guid>
      <description>Bit Manipulation   Insertion Binary to String Flip bit to Wim Next Number Debugger Conversion Pairwise Swap Draw Line  </description>
    </item>
    
    <item>
      <title>Coding Preps - Trees &amp; Graphs</title>
      <link>https://pushpendrahpx.github.io/posts/trees-graphs-4e09b2f2d81e4cb2b3e2196de3c8859c/</link>
      <pubDate>Thu, 14 Oct 2021 00:47:38 +0530</pubDate>
      
      <guid>https://pushpendrahpx.github.io/posts/trees-graphs-4e09b2f2d81e4cb2b3e2196de3c8859c/</guid>
      <description>Trees &amp;amp; Graphs   Route between Nodes Minimal Tree List of Depth Check balanced validate BST Successor Build Order First Common Ancestor BST Sequence Check Subtree Random Node Paths with Sum  </description>
    </item>
    
    <item>
      <title>Coding Preps - Stack &amp; Queues</title>
      <link>https://pushpendrahpx.github.io/posts/stacks-queues-5e1cd9cfec3a45ca957129728ca4d7ef/</link>
      <pubDate>Thu, 14 Oct 2021 00:46:38 +0530</pubDate>
      
      <guid>https://pushpendrahpx.github.io/posts/stacks-queues-5e1cd9cfec3a45ca957129728ca4d7ef/</guid>
      <description>Stacks &amp;amp; Queues  Three in One Stack min Stack of plates Tower of Hanoi Queue via stacks Sort Stack Animal Shelter  </description>
    </item>
    
    <item>
      <title>Coding Preps - Linked Lists</title>
      <link>https://pushpendrahpx.github.io/posts/linked-lists-e58904c532d04911b0326729ba26617b/</link>
      <pubDate>Thu, 14 Oct 2021 00:45:38 +0530</pubDate>
      
      <guid>https://pushpendrahpx.github.io/posts/linked-lists-e58904c532d04911b0326729ba26617b/</guid>
      <description>Linked Lists   Remove Dups Return kth node from last Delete middle node Partition Sum Lists Palindrome Intersection Loop Detection  </description>
    </item>
    
    <item>
      <title>Coding Preps - Arrays &amp; Strings</title>
      <link>https://pushpendrahpx.github.io/posts/coding-prep-arrays-string/</link>
      <pubDate>Thu, 14 Oct 2021 00:44:38 +0530</pubDate>
      
      <guid>https://pushpendrahpx.github.io/posts/coding-prep-arrays-string/</guid>
      <description>Arrays &amp;amp; Strings    Is Unique
 Implement an algo. to determine if a string has all unique characters. What if you cannot use additional data structures ?  Is given string ASCII or UNICODE, because if UNICODE will be there then we need to increase the array size. Sorting &amp;amp; then find continous elements  Time Complexity - O(NlogN) Space Complexity - O(N)   Comparing each char.</description>
    </item>
    
    <item>
      <title>Why State management solutions for Web Apps ?</title>
      <link>https://pushpendrahpx.github.io/posts/post1/</link>
      <pubDate>Sun, 25 Jul 2021 00:44:38 +0530</pubDate>
      
      <guid>https://pushpendrahpx.github.io/posts/post1/</guid>
      <description>In old days we see that websites were not that much evolved. I would say Web Applications are just an evolved website, which uses somewhat more JS for making Websites more &amp;amp; more Interactive.
And as providing users a better User Experience, there is need of managing data at clients browser. I would like to take example of React, but somewhat same thing applies to other Front-end frameworks, like Angular or Vue.</description>
    </item>
    
  </channel>
</rss>
